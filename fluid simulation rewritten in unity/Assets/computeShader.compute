#pragma kernel CSPredicted
#pragma kernel CSNearbySort
#pragma kernel CSNearbyIdx
#pragma kernel CSCalcDensity
#pragma kernel CSCalcForces

struct Entry {
    int particleIdx;
    int gridIdx;
};

RWStructuredBuffer<float4> _Particles;
RWStructuredBuffer<float4> _Velocities;
RWStructuredBuffer<float4> _PredictedParticles;
RWStructuredBuffer<float2> _Densities;
RWStructuredBuffer<Entry> _Nearby;
RWStructuredBuffer<int> _NearbyIdx;

int _ParticleCount;
float _DensityRadius;
float _TargetDensity;
float _ParticleMass;
float _ParticleDamping;
float _PressureMultiplier;
float _ViscosityMultiplier;
float _NearPressureMultiplier;
float _Gravity;
float4 _MinBound;
float4 _MaxBound;
float _DT;

#define maxInt 2147483647
#define PI 3.14159265359

int hash_function(uint3 p) {
    return ((p.x * 73856093) + (p.y * 19349663) + (p.z * 83492791)) % _ParticleCount;
}

[numthreads(32, 1, 1)]
void CSPredicted(uint3 id : SV_DispatchThreadID) {
    int i = id.x;

    // add gravitational forces to particles
    _Velocities[i].y -= _Gravity * _DT;
    
    //_PredictedParticles[i] = particles[i] + velocities[i] * dt;
    // use a constant look ahead factor since for whatever reason it makes
    // particles less jiggly at higher fps
    _PredictedParticles[i] = _Particles[i] + _Velocities[i] * (1/120);

    float3 p = _PredictedParticles[i].xyz / _DensityRadius;

    _Nearby[i].particleIdx = i;
    _Nearby[i].gridIdx = hash_function(uint3(p.x, p.y, p.z));
    _NearbyIdx[i] = maxInt;
}

int _K;
int _J;

[numthreads(32, 1, 1)]
void CSNearbySort(uint3 id : SV_DispatchThreadID) {
    uint i = id.x;
    uint ixj = i ^ _J;

    if (ixj > i) {
        bool ascending = ((i & _K) == 0);

        Entry tempA = _Nearby[i];
        Entry tempB = _Nearby[ixj];

        if ((ascending && (tempA.gridIdx > tempB.gridIdx)) || (!ascending && (tempA.gridIdx < tempB.gridIdx))) {
            _Nearby[i] = tempB;
            _Nearby[ixj] = tempA;
        }
    }
}

[numthreads(32, 1, 1)]
void CSNearbyIdx(uint3 id : SV_DispatchThreadID) {
    uint i = id.x;
    if(i == 0 || _Nearby[i].gridIdx != _Nearby[i - 1].gridIdx) {
        _NearbyIdx[_Nearby[i].gridIdx] = i;
    }
}

// cubic smoothing function
float smoothing(float radius, float diff) {
    if (diff < radius) {
        float volume = (64.0 * PI * pow(abs(radius), 9.0)) / 315.0;
        return pow(max(radius * radius - diff * diff, 0.0), 3.0) / volume;
    }
    return 0;
}

// calculate the density for any point in space does not need to be a real particle position
float calcDensity(float3 particle) {
    double density = 0.;
    int3 base = int3(particle / _DensityRadius);

    // perform nearby search
    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            for (int k = -1; k <= 1; ++k) {
                int idx = _NearbyIdx[hash_function(base + int3(i,j,k))];

                // this means that no such particle exists at those coordinates
                if(idx == maxInt) continue;
                int value = _Nearby[idx].gridIdx;

                // look at all of the particles in the particular grid
                for(int l = 0; _Nearby[idx + l].gridIdx == value && l < _ParticleCount; ++l) {
                    float d = length(_PredictedParticles[_Nearby[idx + l].particleIdx].xyz - particle);
                    density += smoothing(_DensityRadius, d);
                }
            }
        }
    }

    return float(density) * _ParticleMass;
}

[numthreads(32, 1, 1)]
void CSCalcDensity(uint3 id : SV_DispatchThreadID) {
    _Densities[id.x].x = calcDensity(_PredictedParticles[id.x].xyz);
}

// derivative of the smoothing function
float dsmoothing(float radius, float diff) {
    if (diff < radius) {
        float volume = (64. * PI * pow(abs(radius), 9.)) / 315.0;
        return -6. * pow(radius * radius - diff * diff, 2.) * diff / volume;
    }
    return 0;
}

// used for calculating near pressure forces
float steeperSmoothing(float dst, float radius) {
    if (dst < radius) {
        float volume = (PI * pow(abs(radius), 6.)) / 15.0;
        return pow(radius - dst, 3.) * volume;
    }
    return 0.;
}

float DsteeperSmoothing(float dst, float radius) {
    if (dst < radius) {
        float volume = (pow(radius, 6.) * PI) / 35.0;
        return -pow(radius - dst, 2.) / volume;
    }
    return 0.;
}

float random(float idx) {
    return frac(sin(dot(idx, 12.9898)) * 43758.5453123);
}

float3 random_dir(float idx) {
    return float3(random(idx + 73856093.), random(idx + 19349663.), random(idx + 83492791.));
}

float3 pressure_force(float3 particle, int instanceID) {
    double3 pressure = double3(0, 0, 0);
    int3 base = int3(particle.xyz / _DensityRadius);

    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            for (int k = -1; k <= 1; ++k) {
                int idx = _NearbyIdx[hash_function(base + int3(i,j,k))];

                // this means that no such particle exists at those coordinates
                if(idx == maxInt) continue;
                int value = _Nearby[idx].gridIdx;

                for(int l = 0; _Nearby[idx + l].gridIdx == value && l < _ParticleCount; ++l) {
                    int particleIdx = _Nearby[idx + l].particleIdx;

                    float3 particleDiff = _PredictedParticles[particleIdx].xyz - particle.xyz;

                    float d = length(particleDiff);
                    float ds = dsmoothing(_DensityRadius, d);

                    // near density smoothing
                    //float nds = steeperSmoothing(_DensityRadius, d) * _NearPressureMultiplier;

                    // if moving in same direction pick a random one instead
                    float3 dir = d == 0 ? random_dir(float(instanceID + particleIdx)) : particleDiff / d;

                    // instead of just p0 use the average particle pressure between the
                    // current particle and this particle
                    float p0 = _TargetDensity - _Densities[particleIdx].x;
                    float p1 = _TargetDensity - _Densities[instanceID].x;
                    float avgp = (p0 + p1) / 2.0;

                    pressure += dir * avgp * ds;
                    //pressure += dir * avgp * nds * .01;
                }
            }
        }
    }

    return float3(pressure) * _ParticleMass;
}

float3 viscosity_force(float3 particle, float3 velocity) {
    double3 viscosity = double3(0, 0, 0);
    int3 base = int3(particle / _DensityRadius);

    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            for (int k = -1; k <= 1; ++k) {
                int idx = _NearbyIdx[hash_function(base + int3(i,j,k))];

                // this means that no such particle exists at those coordinates
                if(idx == maxInt) continue;
                int value = _Nearby[idx].gridIdx;

                for(int l = 0; _Nearby[idx + l].gridIdx == value && l < _ParticleCount; ++l) {
                    int particleIdx = _Nearby[idx + l].particleIdx;

                    float3 particleDiff = particle - _PredictedParticles[particleIdx].xyz;
                    float d = length(particleDiff);
                    float s = smoothing(_DensityRadius, d);
                    viscosity += (_Velocities[particleIdx].xyz - velocity) * s;
                }
            }
        }
    }

    return float3(viscosity);
}

[numthreads(32, 1, 1)]
void CSCalcForces(uint3 id : SV_DispatchThreadID) {
    uint i = id.x;
    // add particle pressure forces
    // tells the particle how fast it should conform to target density
    float3 pressureAccel = pressure_force(_PredictedParticles[i].xyz, i) / _Densities[i].x;
    _Velocities[i] += float4(pressureAccel * _PressureMultiplier * _DT, 0.);

    // add viscosity force
    // creates friction between nearby particles so that particles within
    // the radius have similar velocities
    float3 viscosity_accel = viscosity_force(_PredictedParticles[i].xyz, _Velocities[i].xyz);
    _Velocities[i] += float4(viscosity_accel * _ViscosityMultiplier * _DT, 0.);

    // clamp to stop some aggressive behaviors at high speeds
    //_Particles[i] += clamp(_Velocities[i], float4(-28,-28,-28, 0), float4(28, 28, 28, 0)) * _DT;
    _Particles[i] += _Velocities[i] * _DT;

    // check bounds and reverse particle direction with damping if bounds are hit
    float3 p = _Particles[i].xyz;
    float3 c = clamp(p, _MinBound.xyz, _MaxBound.xyz);

    _Particles[i] = float4(c, 0);
    _Velocities[i] = float4(lerp(_Velocities[i].xyz, _Velocities[i].xyz * -_ParticleDamping, float3(p.x != c.x, p.y != c.y, p.z != c.z)), 0);
}